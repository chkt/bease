import assert from 'assert';
import { describe, it } from 'mocha';

import BezierEase from '../source/BezierEase';



function _testEpsilon(ease, x, y) {
	const n = ease.yOfX(x);

	assert(Math.abs(n - y) < 1.0e-4, `x:${ x.toFixed(4) } returned y:${ n }, expected y:${ y }`);
}

function _testInterval(ease, x, y0, y1) {
	const y = ease.yOfX(x);
	const i0 = y - y0, i1 = y1 - y;

	assert(i0 > -1.0e-4, `x:${ x.toFixed(4) } returned y:${ y }, expected y >= ${ y0 }`);
	assert(i1 > -1.0e-4, `x:${ x.toFixed(4) } returned y:${ y }, expected y <= ${ y1 }`);
}

function _testCurve(ease, y) {
	for (let i = 0; i < 1000; i += 1) {
		const i0 = Math.floor(i * 0.1), i1 = i0 + 1;

		if (i % 10.0 === 0.0 || i0 === i1) _testEpsilon(ease, i * 0.001, y[i0]);
		else _testInterval(ease, i * 0.001, y[i0], y[i1]);
	}
}



describe('BezierEase', () => {
	describe('#yOfX', () => {
		it("should return linear scaling values for a linear easing curve", () => {
			const ease = BezierEase.Linear();

			for (let i = 0; i <= 1000; i += 1) {
				const n = i * 0.001;

				_testEpsilon(ease, n, n);
			}
		});

		it("should return correct scaling values for a easeinout easing curve", () => {
			const ease = BezierEase.EaseInOut();
			const y = [
				0.0000, 0.0002, 0.0008, 0.0017, 0.0031, 0.0048, 0.0070, 0.0095, 0.0125, 0.0159,
				0.0197, 0.0240, 0.0286, 0.0337, 0.0393, 0.0452, 0.0516, 0.0585, 0.0657, 0.0735,
				0.0816, 0.0903, 0.0993, 0.1088, 0.1188, 0.1292, 0.1400, 0.1512, 0.1628, 0.1749,
				0.1874, 0.2003, 0.2136, 0.2272, 0.2411, 0.2555, 0.2701, 0.2852, 0.3005, 0.3160,
				0.3319, 0.3480, 0.3643, 0.3808, 0.3975, 0.4143, 0.4313, 0.4484, 0.4655, 0.4828,
				0.5000, 0.5172, 0.5344, 0.5516, 0.5687, 0.5857, 0.6025, 0.6192, 0.6358, 0.6520,
				0.6681, 0.6840, 0.6995, 0.7148, 0.7298, 0.7445, 0.7589, 0.7728, 0.7865, 0.7997,
				0.8126, 0.8251, 0.8372, 0.8488, 0.8600, 0.8708, 0.8812, 0.8912, 0.9007, 0.9097,
				0.9184, 0.9265, 0.9342, 0.9415, 0.9484, 0.9548, 0.9608, 0.9663, 0.9714, 0.9760,
				0.9803, 0.9841, 0.9875, 0.9905, 0.9930, 0.9952, 0.9969, 0.9983, 0.9992, 0.9998,
				1.0000
			];

			_testCurve(ease, y);
		});

		it("should return correct scaling values for steep easing curves", () => {
			const ease = new BezierEase(0.0, 1.0, 0.0, 1.0);
			const y = [
				0.0000, 0.5172, 0.6133, 0.6725, 0.7151, 0.7480, 0.7747, 0.7968, 0.8157, 0.8319,
				0.8461, 0.8587, 0.8699, 0.8799, 0.8889, 0.8970, 0.9045, 0.9113, 0.9175, 0.9232,
				0.9284, 0.9333, 0.9378, 0.9419, 0.9458, 0.9493, 0.9527, 0.9558, 0.9587, 0.9614,
				0.9639, 0.9662, 0.9684, 0.9705, 0.9724, 0.9742, 0.9760, 0.9776, 0.9790, 0.9805,
				0.9818, 0.9830, 0.9842, 0.9853, 0.9863, 0.9872, 0.9881, 0.9890, 0.9898, 0.9906,
				0.9912, 0.9919, 0.9925, 0.9931, 0.9936, 0.9941, 0.9946, 0.9950, 0.9954, 0.9958,
				0.9962, 0.9965, 0.9968, 0.9971, 0.9974, 0.9976, 0.9978, 0.9980, 0.9982, 0.9984,
				0.9986, 0.9987, 0.9989, 0.9990, 0.9991, 0.9992, 0.9993, 0.9994, 0.9995, 0.9996,
				0.9996, 0.9996, 0.9997, 0.9998, 0.9998, 0.9999, 0.9999, 0.9999, 0.9999, 0.9999,
				1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
				1.0000
			];

			_testCurve(ease, y);
		});

		it("should return correct scaling values for reverse scoped easing curves", () => {
			const ease = new BezierEase(0.0, 1.0, 1.0, 0.0);
			const y = [
				0.0000, 0.1567, 0.2121, 0.2509, 0.2812, 0.3060, 0.3270, 0.3451, 0.3610, 0.3750,
				0.3874, 0.3985, 0.4085, 0.4176, 0.4258, 0.4332, 0.4400, 0.4461, 0.4517, 0.4568,
				0.4614, 0.4656, 0.4695, 0.4730, 0.4762, 0.4791, 0.4817, 0.4840, 0.4862, 0.4881,
				0.4898, 0.4913, 0.4927, 0.4939, 0.4949, 0.4958, 0.4966, 0.4973, 0.4979, 0.4984,
				0.4988, 0.4991, 0.4994, 0.4996, 0.4997, 0.4999, 0.4999, 0.5000, 0.5000, 0.5000,
				0.5000, 0.5000, 0.5000, 0.5000, 0.5001, 0.5001, 0.5003, 0.5004, 0.5006, 0.5009,
				0.5012, 0.5016, 0.5021, 0.5027, 0.5034, 0.5042, 0.5051, 0.5061, 0.5073, 0.5087,
				0.5102, 0.5119, 0.5138, 0.5160, 0.5183, 0.5209, 0.5238, 0.5270, 0.5305, 0.5344,
				0.5386, 0.5432, 0.5483, 0.5539, 0.5600, 0.5668, 0.5742, 0.5824, 0.5914, 0.6015,
				0.6126, 0.6250, 0.6390, 0.6548, 0.6729, 0.6939, 0.7188, 0.7491, 0.7879, 0.8433,
				1.0000
			];

			_testCurve(ease, y);
		});
	});
});
